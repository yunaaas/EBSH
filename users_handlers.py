from aiogram import types
from aiogram.types import ContentType
from aiogram.types import ParseMode
from keyboards import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
from users import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from states import *  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from config import API_TOKEN
from states import *
from config import admins
from config import ya_token

text = '''
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> –≤ –º–∏—Ä <i>—Å—Ç–∏–ª—å–Ω–æ–π</i> –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–¥–µ–∂–¥—ã! 

–ú—ã ‚Äî –º–æ–ª–æ–¥–æ–π –∏ –¥–∏–Ω–∞–º–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è –±—Ä–µ–Ω–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∞–∂–Ω–µ–π—à–∏–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —è–≤–ª—è—é—Ç—Å—è <u>–∫–∞—á–µ—Å—Ç–≤–æ</u>, <u>—É–¥–æ–±—Å—Ç–≤–æ</u> –∏ <u>—Å—Ç–∏–ª—å</u> üòé

<b>–°–ø–∞—Å–∏–±–æ</b>, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞–º! üòä

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ. üì≤
'''

user_db = UserDB()


async def reset_state(message: types.Message, state: FSMContext):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.reply("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


async def cmd_start(message: types.Message):
    user = message.from_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    user_db.add_user_if_not_exists(user.id, user.first_name, user.last_name, user.username)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_start_keyboard()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}\n{text}", parse_mode=ParseMode.HTML, reply_markup=keyboard)


# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–æ–≤–∞—Ä—ã"
# async def products_handler(callback_query: types.CallbackQuery):
#     await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª: üõí –¢–æ–≤–∞—Ä—ã\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä.")


# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
# async def gift_handler(callback_query: types.CallbackQuery):
#     await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª: üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫\n–ü–æ–¥–∞—Ä–∫–∏ –¥–ª—è –≤–∞—Å –∂–¥—É—Ç! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
async def support_handler(callback_query: types.CallbackQuery):
    keyboard = get_questions_keyboard()
    await callback_query.message.edit_text(
        "üí¨ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª: –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ —á–∞—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
    )



    await callback_query.message.edit_reply_markup(reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
async def cancel_question(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤."""
    await callback_query.message.edit_text(
        "üí¨ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª: –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ —á–∞—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.", 
        reply_markup=get_questions_keyboard(), 
        parse_mode=ParseMode.HTML
    )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def support_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'."""
    await callback_query.message.edit_text(
        "üí¨ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª: –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ —á–∞—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
    )
    await callback_query.answer("–ë–µ–∂–∏–º —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å! üëÄ")
    ask_button = InlineKeyboardButton(text="‚úçÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")
    back_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard = InlineKeyboardMarkup().add(ask_button).add(back_button)

    await callback_query.message.edit_reply_markup(reply_markup=keyboard)


async def ask_own_question(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–ø—Ä–æ—Å –∏ –¥–∞—ë–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã."""
    await callback_query.message.edit_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–≤–∏–¥–∏—Ç –µ–≥–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! üíå"
    )
    await callback_query.answer("–ñ–¥–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å! ‚è≥")
    cancel_button = InlineKeyboardButton(text="üôà –Ø –Ω–∞–∂–∞–ª —Å—é–¥–∞ —Å–ª—É—á–∞–π–Ω–æ", callback_data="cancel_question")
    keyboard = InlineKeyboardMarkup().add(cancel_button)

    await callback_query.message.edit_reply_markup(reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(UserStates.asking_question)


async def cancel_question(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω! ‚ùå")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.edit_text(
        f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. {text}", parse_mode=ParseMode.HTML,
        reply_markup=get_start_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    )


async def handle_question(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    if await state.get_state() == UserStates.asking_question.state:
        user = message.from_user

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in admins:
            await message.forward(chat_id=admin_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await message.bot.send_message(
                chat_id=admin_id,
                text=f"–í–û–ü–†–û–°!!!\n\n–û—Ç: {user.first_name} {user.last_name} @{user.username}, \n<code>|send |{user.id}|</code>",
                parse_mode=ParseMode.HTML
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. üíå", reply_markup=get_start_keyboard())

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()


from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType
from states import UserStates

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º"
async def human_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º'."""
    
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.answer("–£–∂–µ –∏—â–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –≤–∞—Å! üëÄ")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text("üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.", parse_mode=ParseMode.HTML)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(UserStates.waiting_for_message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    back_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    keyboard = InlineKeyboardMarkup().add(back_button)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.finish()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! üòÅ")
    await callback_query.message.edit_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_start_keyboard(),  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_user_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    
    if await state.get_state() == UserStates.waiting_for_message.state:
        user = message.from_user
        user_message = message.text.strip()  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for admin_id in admins:
            await message.bot.send_message(
                chat_id=admin_id,
                text=f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} {user.last_name} (@{user.username}):\n\n{user_message}\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –ª–∏—á–Ω–æ –Ω–∞–∂–∞–≤ —Å—é–¥–∞ ‚Äî \n(@{user.username}), –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ‚Äî \n<code>|send |{user.id}|</code>",
                parse_mode=ParseMode.HTML
            )

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. üí¨", reply_markup=get_start_keyboard())
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def process_back_to_main(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = get_start_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ üòÅ")
    await callback_query.answer()
    await callback_query.message.edit_text(text=f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! {text}", reply_markup=keyboard, parse_mode=ParseMode.HTML)


async def gift_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data="conditions_accepted"),
        InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="main_menu")
    )
    await callback_query.answer("–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç! üîÑ")
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏
    await callback_query.message.edit_text(
        "–£–≤–∞–∂–∞–µ–º—ã–π <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</b>, –ø—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ! –ß—Ç–æ–±—ã —É—Å–ª–æ–≤–∏—è –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>.\n\n"
        "<b>–í–∞–∂–Ω–æ:</b> –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞, –æ—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å <b>–æ—Ü–µ–Ω–∫–æ–π 5 –∑–≤–µ–∑–¥</b> —Å <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</b> –∏–ª–∏ <b>–≤–∏–¥–µ–æ</b>\n\n"
        "<b>–®–∞–≥–∏:</b>\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ.\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –ø—Ä–æ—Ñ–∏–ª—è.\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <i>¬´–ü–æ–∫—É–ø–∫–∏¬ª</i>.\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.\n"
        "5. –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ—á–∫—É <i>¬´–û—Ç–∑—ã–≤—ã¬ª</i>, –æ–±—ã—á–Ω–æ –æ–Ω–∞ –ø–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞.\n"
        "6. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <i>¬´–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª</i>.\n"
        "7. –ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–º –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à —Ç–æ–≤–∞—Ä, <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ</b>.\n\n"
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!</b>",
        reply_markup=keyboard, parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
from aiogram.types import ContentType, ParseMode, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
async def conditions_accepted(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await callback_query.answer("–ú—ã –Ω–∞—á–∏–Ω–∞–µ–º! ‚úÖ")
    await callback_query.message.edit_text(
        "<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª:\n</b> üéÅ <i>–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫</i>\n\n"
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b> üì±"
        "\n\n<i>–ú—ã –∂–¥–µ–º –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞!</i> üíå",
        parse_mode=ParseMode.HTML
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±", request_contact=True)
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(GiftState.waiting_for_phone)
    await callback_query.message.answer(
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>",
        reply_markup=keyboard,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def handle_phone(message: types.Message, state: FSMContext):
    if message.contact:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_number = message.contact.phone_number
        await state.update_data(phone_number=phone_number)
        user = message.from_user
        user_db.set_dr(user.id, phone_number)
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ
        # keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
        #     KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ üì∏")
        # )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É —à–∞–≥—É ‚Äî –∑–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ
        await state.set_state(GiftState.waiting_for_photo)
        await message.answer(
            "<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b> üì± \n<i>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞.</i>", 
            reply_markup=ReplyKeyboardRemove(),
            # reply_markup=keyboard,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            "<b>–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b> ‚ùå \n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i> üì≤",
            parse_mode=ParseMode.HTML
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
async def handle_photo(message: types.Message, state: FSMContext):
    if message.content_type == ContentType.PHOTO:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(photo=message.photo[-1].file_id)

        # –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        user_data = await state.get_data()
        photo_id = user_data['photo']
        phone_number = user_data['phone_number']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = (
            f"<b>–ü–æ–¥–∞—Ä–æ–∫ –∑–∞ –æ—Ç–∑—ã–≤!</b>\n\n"
            f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone_number}\n"
            f"–û—Ç: {message.from_user.first_name} {message.from_user.last_name} @{message.from_user.username}, \n<code>|send |{message.from_user.id}|</code>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–¥–º–∏–Ω—É
        for admin_id in admins:
            await message.bot.send_photo(
                admin_id, 
                photo_id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file_id
                caption=admin_message,  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
                parse_mode=ParseMode.HTML
            )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(row_width=1)
        button1 = InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        button2 = InlineKeyboardButton("üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã", callback_data="view_other_products", url="https://ebsh.taplink.ws/")
        keyboard.add(button2, button1)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤. üíå\n–ü–æ–∫–∞ –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏!",
            reply_markup=keyboard
        )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()

    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await message.answer(
            "<b>–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ.</b> ‚ùå \n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞.</i> üì∏",
            parse_mode=ParseMode.HTML
        )






# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def register_user_handlers(dp):
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_callback_query_handler(support_handler, lambda c: c.data == "support")
    dp.register_callback_query_handler(ask_own_question, lambda c: c.data == "ask_question")
    dp.register_callback_query_handler(cancel_question, lambda c: c.data == "cancel_question", state=UserStates.asking_question)
    dp.register_message_handler(handle_question, content_types=["any"], state=UserStates.asking_question)
    dp.register_callback_query_handler(process_back_to_main, lambda c: c.data == "main_menu")
    dp.register_callback_query_handler(gift_handler, lambda c: c.data == "gift")
    dp.register_callback_query_handler(conditions_accepted, lambda c: c.data == "conditions_accepted")
    dp.register_message_handler(handle_photo, content_types=types.ContentType.ANY, state=GiftState.waiting_for_photo)
    dp.register_message_handler(handle_phone, content_types=types.ContentType.ANY, state=GiftState.waiting_for_phone)
    # dp.register_message_handler(handle_bank_name, state=GiftState.waiting_for_bank_name)
    dp.register_callback_query_handler(human_handler, lambda c: c.data == 'human')  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º'
    dp.register_message_handler(handle_user_message, content_types=types.ContentType.TEXT, state=UserStates.waiting_for_message)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.register_callback_query_handler(back_to_main, lambda c: c.data == "back_to_main", state=UserStates.waiting_for_message)
    dp.register_message_handler(reset_state, commands=["reset"], state="*")  # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è